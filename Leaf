<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bus Bell Detection System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .live-section {
            text-align: center;
        }

        .waveform-container {
            width: 200px;
            height: 100px;
            margin: 20px auto;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(45deg, #f0f9ff, #e0f2fe);
            border-radius: 15px;
            border: 2px solid #0284c7;
        }

        .waveform {
            display: flex;
            align-items: center;
            gap: 3px;
        }

        .wave-bar {
            width: 4px;
            background: #0284c7;
            border-radius: 2px;
            transition: height 0.1s ease;
        }

        .wave-bar.active {
            background: #10b981;
        }

        .record-button {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
        }

        .record-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);
        }

        .record-button.recording {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
        }

        .status {
            margin: 15px 0;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .status.listening {
            color: #10b981;
        }

        .status.stopped {
            color: #6b7280;
        }

        .bell-counter {
            text-align: center;
        }

        .counter-display {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }

        .counter-item {
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #cbd5e1;
        }

        .counter-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1e40af;
        }

        .counter-label {
            font-size: 0.9rem;
            color: #64748b;
            margin-top: 5px;
        }

        .bus-tracker {
            grid-column: 1 / -1;
        }

        .tracker-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 25px;
        }

        .stat-item {
            background: linear-gradient(135deg, #fef3c7, #fcd34d);
            padding: 15px;
            border-radius: 12px;
            text-align: center;
            border: 2px solid #f59e0b;
        }

        .stat-number {
            font-size: 1.8rem;
            font-weight: 700;
            color: #92400e;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #78350f;
        }

        .timeline {
            background: linear-gradient(to right, #f1f5f9, #e2e8f0);
            border-radius: 15px;
            padding: 20px;
            position: relative;
            min-height: 120px;
        }

        .timeline-item {
            display: flex;
            align-items: center;
            margin: 10px 0;
            padding: 10px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            animation: slideIn 0.5s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .timeline-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-size: 1.2rem;
        }

        .stopping {
            background: linear-gradient(135deg, #fef2f2, #fee2e2);
            color: #dc2626;
            border: 2px solid #f87171;
        }

        .starting {
            background: linear-gradient(135deg, #f0fdf4, #dcfce7);
            color: #16a34a;
            border: 2px solid #4ade80;
        }

        .timeline-text {
            flex: 1;
        }

        .timeline-time {
            font-size: 0.8rem;
            color: #6b7280;
        }

        .history-panel {
            grid-column: 1 / -1;
            background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            border: 2px solid #cbd5e1;
        }

        .history-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .export-btn {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .export-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: 0 4px 20px rgba(16, 185, 129, 0.3);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateX(0);
        }

        .bell-history {
            max-height: 200px;
            overflow-y: auto;
        }

        .bell-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            margin: 5px 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .bell-type {
            font-weight: 600;
        }

        .single-bell {
            color: #dc2626;
        }

        .double-bell {
            color: #16a34a;
        }

        @media (max-width: 768px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .counter-display {
                grid-template-columns: 1fr;
            }
            
            .tracker-stats {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
            100% {
                transform: scale(1);
            }
        }

        .ring {
            animation: ring 0.5s ease;
        }

        @keyframes ring {
            0% { transform: rotate(0deg); }
            25% { transform: rotate(-10deg); }
            50% { transform: rotate(10deg); }
            75% { transform: rotate(-5deg); }
            100% { transform: rotate(0deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöå Bus Bell Detection System</h1>
            <p>Smart AI-powered bell detection for real-time bus tracking</p>
        </div>

        <div class="main-grid">
            <!-- Live Recording Section -->
            <div class="card live-section">
                <h2>üé§ Live Recording</h2>
                <div class="waveform-container">
                    <div class="waveform" id="waveform">
                        <!-- Waveform bars will be generated by JavaScript -->
                    </div>
                </div>
                <button class="record-button" id="recordBtn" onclick="toggleRecording()">
                    üéôÔ∏è Start Recording
                </button>
                <div class="status stopped" id="status">Ready to listen</div>
            </div>

            <!-- Bell Detection Counter -->
            <div class="card bell-counter">
                <h2>üîî Bell Detection</h2>
                <div class="counter-display">
                    <div class="counter-item">
                        <div class="counter-number" id="singleBells">0</div>
                        <div class="counter-label">Single Bells</div>
                    </div>
                    <div class="counter-item">
                        <div class="counter-number" id="doubleBells">0</div>
                        <div class="counter-label">Double Bells</div>
                    </div>
                </div>
                <div class="bell-history" id="bellHistory">
                    <div style="text-align: center; color: #6b7280; padding: 20px;">
                        No bells detected yet
                    </div>
                </div>
            </div>

            <!-- Bus Stop Tracker -->
            <div class="card bus-tracker">
                <h2>üöè Bus Stop Tracker</h2>
                <div class="tracker-stats">
                    <div class="stat-item">
                        <div class="stat-number" id="totalStops">0</div>
                        <div class="stat-label">Total Stops</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="currentStatus">Idle</div>
                        <div class="stat-label">Bus Status</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="lastActivity">--</div>
                        <div class="stat-label">Last Activity</div>
                    </div>
                </div>
                <div class="timeline" id="timeline">
                    <div style="text-align: center; color: #6b7280; padding: 40px;">
                        üöå Waiting for bus activity...
                    </div>
                </div>
            </div>

            <!-- Data History & Insights -->
            <div class="card history-panel">
                <div class="history-header">
                    <h2>üìä Today's Insights</h2>
                    <button class="export-btn" onclick="exportData()">üì• Export Data</button>
                </div>
                <div id="insights">
                    <p>üåÖ <strong>Morning Summary:</strong> Monitoring started</p>
                    <p>üìà <strong>Detection Rate:</strong> Ready to track</p>
                    <p>‚è∞ <strong>Most Active:</strong> Data collecting...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification -->
    <div class="notification" id="notification"></div>

    <script>
        // Global state
        let isRecording = false;
        let singleBellCount = 0;
        let doubleBellCount = 0;
        let totalStops = 0;
        let bellHistory = [];
        let busStatus = 'Idle';
        let lastBellTime = null;
        let waveformInterval = null;
        let simulationInterval = null;

        // Initialize waveform
        function initWaveform() {
            const waveform = document.getElementById('waveform');
            waveform.innerHTML = '';
            for (let i = 0; i < 20; i++) {
                const bar = document.createElement('div');
                bar.className = 'wave-bar';
                bar.style.height = '10px';
                waveform.appendChild(bar);
            }
        }

        // Animate waveform
        function animateWaveform() {
            const bars = document.querySelectorAll('.wave-bar');
            bars.forEach((bar, index) => {
                if (isRecording) {
                    const height = Math.random() * 60 + 10;
                    bar.style.height = height + 'px';
                    bar.classList.add('active');
                } else {
                    bar.style.height = '10px';
                    bar.classList.remove('active');
                }
            });
        }

        // Toggle recording
        function toggleRecording() {
            const btn = document.getElementById('recordBtn');
            const status = document.getElementById('status');
            
            isRecording = !isRecording;
            
            if (isRecording) {
                btn.textContent = '‚èπÔ∏è Stop Recording';
                btn.classList.add('recording');
                status.textContent = 'Listening for bells...';
                status.className = 'status listening';
                
                // Start waveform animation
                waveformInterval = setInterval(animateWaveform, 100);
                
                // Start bell detection simulation
                startBellSimulation();
                
                showNotification('üéôÔ∏è Recording started! Listening for bus bells...');
            } else {
                btn.textContent = 'üéôÔ∏è Start Recording';
                btn.classList.remove('recording');
                status.textContent = 'Stopped';
                status.className = 'status stopped';
                
                // Stop animations
                clearInterval(waveformInterval);
                clearInterval(simulationInterval);
                animateWaveform(); // Reset bars
                
                showNotification('‚èπÔ∏è Recording stopped');
            }
        }

        // Simulate bell detection
        function startBellSimulation() {
            simulationInterval = setInterval(() => {
                if (isRecording && Math.random() < 0.1) { // 10% chance every second
                    const currentTime = Date.now();
                    const isDoubleBell = lastBellTime && (currentTime - lastBellTime) < 1500;
                    
                    if (isDoubleBell) {
                        detectDoubleBell();
                    } else {
                        detectSingleBell();
                    }
                    
                    lastBellTime = currentTime;
                }
            }, 1000);
        }

        // Detect single bell
        function detectSingleBell() {
            singleBellCount++;
            document.getElementById('singleBells').textContent = singleBellCount;
            
            const timestamp = new Date().toLocaleTimeString();
            bellHistory.unshift({
                type: 'single',
                time: timestamp,
                timestamp: Date.now()
            });
            
            updateBellHistory();
            updateBusStatus('Stopping');
            addTimelineEvent('stopping', 'üõë Bus is stopping', timestamp);
            
            // Ring animation
            document.querySelector('.bell-counter').classList.add('ring');
            setTimeout(() => {
                document.querySelector('.bell-counter').classList.remove('ring');
            }, 500);
            
            showNotification('üîî Single bell detected! Bus is stopping');
        }

        // Detect double bell
        function detectDoubleBell() {
            doubleBellCount++;
            document.getElementById('doubleBells').textContent = doubleBellCount;
            
            // Remove the last single bell from history and add double bell
            if (bellHistory.length > 0 && bellHistory[0].type === 'single') {
                bellHistory[0] = {
                    type: 'double',
                    time: new Date().toLocaleTimeString(),
                    timestamp: Date.now()
                };
                singleBellCount--; // Adjust single bell count
                document.getElementById('singleBells').textContent = singleBellCount;
            }
            
            totalStops++;
            document.getElementById('totalStops').textContent = totalStops;
            
            updateBellHistory();
            updateBusStatus('Starting');
            addTimelineEvent('starting', 'üöÄ Bus is starting', new Date().toLocaleTimeString());
            
            showNotification('üîîüîî Double bell detected! Bus is starting');
        }

        // Update bell history display
        function updateBellHistory() {
            const historyDiv = document.getElementById('bellHistory');
            
            if (bellHistory.length === 0) {
                historyDiv.innerHTML = '<div style="text-align: center; color: #6b7280; padding: 20px;">No bells detected yet</div>';
                return;
            }
            
            historyDiv.innerHTML = bellHistory.slice(0, 5).map(bell => `
                <div class="bell-item">
                    <span class="bell-type ${bell.type}-bell">
                        ${bell.type === 'single' ? 'üîî' : 'üîîüîî'} ${bell.type.charAt(0).toUpperCase() + bell.type.slice(1)} Bell
                    </span>
                    <span>${bell.time}</span>
                </div>
            `).join('');
        }

        // Update bus status
        function updateBusStatus(status) {
            busStatus = status;
            document.getElementById('currentStatus').textContent = status;
            document.getElementById('lastActivity').textContent = new Date().toLocaleTimeString();
            
            // Reset to idle after 10 seconds
            setTimeout(() => {
                if (busStatus === status) {
                    busStatus = 'Idle';
                    document.getElementById('currentStatus').textContent = 'Idle';
                }
            }, 10000);
        }

        // Add timeline event
        function addTimelineEvent(type, text, time) {
            const timeline = document.getElementById('timeline');
            
            // Remove placeholder text
            if (timeline.innerHTML.includes('Waiting for bus activity')) {
                timeline.innerHTML = '';
            }
            
            const event = document.createElement('div');
            event.className = 'timeline-item';
            event.innerHTML = `
                <div class="timeline-icon ${type}">
                    ${type === 'stopping' ? 'üõë' : 'üöÄ'}
                </div>
                <div class="timeline-text">
                    <div style="font-weight: 600;">${text}</div>
                    <div class="timeline-time">${time}</div>
                </div>
            `;
            
            timeline.insertBefore(event, timeline.firstChild);
            
            // Keep only last 5 events
            while (timeline.children.length > 5) {
                timeline.removeChild(timeline.lastChild);
            }
        }

        // Show notification
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // Export data
        function exportData() {
            const data = {
                singleBells: singleBellCount,
                doubleBells: doubleBellCount,
                totalStops: totalStops,
                bellHistory: bellHistory,
                exportTime: new Date().toISOString()
            };
            
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `bus-bell-data-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
            
            showNotification('üì• Data exported successfully!');
        }

        // Update insights periodically
        function updateInsights() {
            const insights = document.getElementById('insights');
            const startTime = new Date().toLocaleTimeString();
            
            insights.innerHTML = `
                <p>üåÖ <strong>Session Started:</strong> ${startTime}</p>
                <p>üìà <strong>Detection Rate:</strong> ${bellHistory.length} bells detected</p>
                <p>‚è∞ <strong>Status:</strong> ${isRecording ? 'Actively monitoring' : 'Standby mode'}</p>
                <p>üöå <strong>Bus Stops:</strong> ${totalStops} complete cycles</p>
            `;
        }

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            initWaveform();
            setInterval(updateInsights, 5000); // Update insights every 5 seconds
        });
    </script>
</body>
</html>
